//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.19408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EvalClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Eval", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Eval : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubmitterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Submitter {
            get {
                return this.SubmitterField;
            }
            set {
                if ((object.ReferenceEquals(this.SubmitterField, value) != true)) {
                    this.SubmitterField = value;
                    this.RaisePropertyChanged("Submitter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSent {
            get {
                return this.TimeSentField;
            }
            set {
                if ((this.TimeSentField.Equals(value) != true)) {
                    this.TimeSentField = value;
                    this.RaisePropertyChanged("TimeSent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EvalException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class EvalException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEvalService")]
    public interface IEvalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/SubmitEval", ReplyAction="http://tempuri.org/IEvalService/SubmitEvalResponse")]
        void SubmitEval(EvalClient.ServiceReference1.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/SubmitEval", ReplyAction="http://tempuri.org/IEvalService/SubmitEvalResponse")]
        System.Threading.Tasks.Task SubmitEvalAsync(EvalClient.ServiceReference1.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEval", ReplyAction="http://tempuri.org/IEvalService/GetEvalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EvalClient.ServiceReference1.EvalException), Action="http://tempuri.org/IEvalService/GetEvalEvalExceptionFault", Name="EvalException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
        EvalClient.ServiceReference1.Eval GetEval(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEval", ReplyAction="http://tempuri.org/IEvalService/GetEvalResponse")]
        System.Threading.Tasks.Task<EvalClient.ServiceReference1.Eval> GetEvalAsync(string submitter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEvals", ReplyAction="http://tempuri.org/IEvalService/GetEvalsResponse")]
        EvalClient.ServiceReference1.Eval[] GetEvals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEvals", ReplyAction="http://tempuri.org/IEvalService/GetEvalsResponse")]
        System.Threading.Tasks.Task<EvalClient.ServiceReference1.Eval[]> GetEvalsAsync();
        
        // CODEGEN: Generating message contract since the wrapper name (EvalMessage) of message EvalMessage does not match the default value (GetMessage)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetMessage", ReplyAction="http://tempuri.org/IEvalService/GetMessageResponse")]
        EvalClient.ServiceReference1.MessageResponse GetMessage(EvalClient.ServiceReference1.EvalMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetMessage", ReplyAction="http://tempuri.org/IEvalService/GetMessageResponse")]
        System.Threading.Tasks.Task<EvalClient.ServiceReference1.MessageResponse> GetMessageAsync(EvalClient.ServiceReference1.EvalMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="EvalMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class EvalMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string ContractVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int Id;
        
        public EvalMessage() {
        }
        
        public EvalMessage(string ContractVersion, int Id) {
            this.ContractVersion = ContractVersion;
            this.Id = Id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MessageResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MessageResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string ContractVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public EvalClient.ServiceReference1.Eval EvalData;
        
        public MessageResponse() {
        }
        
        public MessageResponse(string ContractVersion, EvalClient.ServiceReference1.Eval EvalData) {
            this.ContractVersion = ContractVersion;
            this.EvalData = EvalData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEvalServiceChannel : EvalClient.ServiceReference1.IEvalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EvalServiceClient : System.ServiceModel.ClientBase<EvalClient.ServiceReference1.IEvalService>, EvalClient.ServiceReference1.IEvalService {
        
        public EvalServiceClient() {
        }
        
        public EvalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SubmitEval(EvalClient.ServiceReference1.Eval eval) {
            base.Channel.SubmitEval(eval);
        }
        
        public System.Threading.Tasks.Task SubmitEvalAsync(EvalClient.ServiceReference1.Eval eval) {
            return base.Channel.SubmitEvalAsync(eval);
        }
        
        public EvalClient.ServiceReference1.Eval GetEval(string submitter) {
            return base.Channel.GetEval(submitter);
        }
        
        public System.Threading.Tasks.Task<EvalClient.ServiceReference1.Eval> GetEvalAsync(string submitter) {
            return base.Channel.GetEvalAsync(submitter);
        }
        
        public EvalClient.ServiceReference1.Eval[] GetEvals() {
            return base.Channel.GetEvals();
        }
        
        public System.Threading.Tasks.Task<EvalClient.ServiceReference1.Eval[]> GetEvalsAsync() {
            return base.Channel.GetEvalsAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EvalClient.ServiceReference1.MessageResponse EvalClient.ServiceReference1.IEvalService.GetMessage(EvalClient.ServiceReference1.EvalMessage request) {
            return base.Channel.GetMessage(request);
        }
        
        public EvalClient.ServiceReference1.Eval GetMessage(ref string ContractVersion, int Id) {
            EvalClient.ServiceReference1.EvalMessage inValue = new EvalClient.ServiceReference1.EvalMessage();
            inValue.ContractVersion = ContractVersion;
            inValue.Id = Id;
            EvalClient.ServiceReference1.MessageResponse retVal = ((EvalClient.ServiceReference1.IEvalService)(this)).GetMessage(inValue);
            ContractVersion = retVal.ContractVersion;
            return retVal.EvalData;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<EvalClient.ServiceReference1.MessageResponse> EvalClient.ServiceReference1.IEvalService.GetMessageAsync(EvalClient.ServiceReference1.EvalMessage request) {
            return base.Channel.GetMessageAsync(request);
        }
        
        public System.Threading.Tasks.Task<EvalClient.ServiceReference1.MessageResponse> GetMessageAsync(string ContractVersion, int Id) {
            EvalClient.ServiceReference1.EvalMessage inValue = new EvalClient.ServiceReference1.EvalMessage();
            inValue.ContractVersion = ContractVersion;
            inValue.Id = Id;
            return ((EvalClient.ServiceReference1.IEvalService)(this)).GetMessageAsync(inValue);
        }
    }
}
